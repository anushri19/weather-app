{"version":3,"sources":["images/earth.png","App.js","images/logo.png","images/hero-img.png","Login.js","Home.js","reportWebVitals.js","index.js"],"names":["App","useState","weather","setWeather","userDetails","setUserDetails","season","setSeason","country","setCountry","city","setCity","fetchGeoLocation","ip","a","axios","get","fetchGeoLocationAddress","getIpAddress","publicIp","v4","publicIpV4","result","data","location","address","description","toString","toLowerCase","main","temp","includes","useEffect","users","JSON","parse","localStorage","getItem","Object","keys","length","className","name","src","icon","alt","earth","pressure","wind","speed","humidity","Math","round","formReducer","state","event","value","Login","history","useHistory","useReducer","formData","setFormData","submitting","setSubmitting","handleChange","target","console","log","logo","people","onSubmit","preventDefault","setTimeout","onChange","placeholder","type","onClick","setItem","stringify","push","Home","basename","window","pathname","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54efca66.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/earth.ac42fedd.png\";","import publicIp from \"react-public-ip\";\nimport React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport './App.css';\nimport earth from './images/earth.png';\nimport Login from \"./Login\";\n\nconst App = () => {\n    const [weather, setWeather] = useState({})\n    const [userDetails, setUserDetails] = useState(null)\n    const [season, setSeason] = useState({})\n    const [country, setCountry] = useState({})\n    const [city, setCity] = useState({})\n    const fetchGeoLocation = async (ip) => {\n    if(ip){\n      return await axios.get(`https://geo.ipify.org/api/v1?apiKey=at_8XrZ8UrBlzmxYzgR2J2hcFp7ZtnC3&ipAddress=${ip}`);\n    }\n  }\n\n  const fetchGeoLocationAddress = async (city, country) => {\n    if(city && country){\n      setCity(city)\n      setCountry(country)\n      return  await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=5070f6fea5200623773cf6f8e661ab5e`);\n    }\n  }\n\n  const getIpAddress = async () => {\n    const  publicIpV4 = await publicIp.v4();\n\n    if(publicIpV4){\n      const result = await fetchGeoLocation(publicIpV4);\n      const { city, country} = result.data.location;\n      const address = await fetchGeoLocationAddress(city, country);\n      setWeather(address.data)\n      let description = address.data.weather[0].description.toString().toLowerCase()\n      if (address.data.main.temp < 288){\n        setSeason(\"winter\")\n      }\n      else if (address.data.main.temp > 288){\n        if(description.includes(\"rain\") || description.includes(\"thunderstorm\")) {\n          setSeason(\"rain\")\n        }\n        else if(description.includes(\"mist\") || description.includes(\"haze\")) {\n          setSeason(\"mist\")\n        }\n        else{\n          setSeason(\"summer\")\n        }\n      }\n    }\n  }\n\n useEffect(() => {\n    getIpAddress()\n    const users = JSON.parse(localStorage.getItem(\"users\")) || null;\n    setUserDetails(users)\n  }, [])\n\n\n  if(!Object.keys(weather).length) return <div>Loading....</div>\n\n  return (\n    <div className ={season}>\n    <div className=\"App\">\n      <header className=\"App-header ${season}\">\n        <h1>Hi {userDetails.name} ! Here are the weather details of your location.</h1>\n        <div className = \"overLap\">\n        <img src={\"http://openweathermap.org/img/wn/\" + weather.weather[0].icon + \"@2x.png\"} alt=\"logo\" className=\"weather\" />\n        <img src={earth} alt=\"earth\" className=\"earth\"/>\n        </div>\n        <ul><b>\n        <li>City: {city}</li>\n        <li>Country: {country}</li>\n        <li>Weather condition: {weather.weather[0].main}</li>\n        <li>Pressure:  {weather.main.pressure} hPa</li>\n        <li>Wind speed:  {weather.wind.speed} meter/sec</li>\n        <li>Humidity:  {weather.main.humidity}  %</li>\n        <li>Temperature: {Math.round(weather.main.temp - 273.15)} Â°C</li>\n        </b>\n        </ul>\n      </header>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.a6d0b7d8.png\";","export default __webpack_public_path__ + \"static/media/hero-img.14dc8f7a.png\";","import React, { useReducer, useState } from 'react';\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\nimport './Login.css';\nimport App from './App';\nimport logo from './images/logo.png';\nimport people from './images/hero-img.png';\n\n\nconst formReducer = (state, event) => {\n return {\n   ...state,\n   [event.name]: event.value\n }\n}\n\nfunction Login() {\n  let history = useHistory();\n  const [formData, setFormData] = useReducer(formReducer, {});\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSubmitting(true);\n\n    setTimeout(() => {\n      setSubmitting(false);\n    }, 3000);\n  }\n\n  const handleChange = event => {\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n    console.log(setFormData.name);\n  }\n\n  const submitHandler = () => {\n    localStorage.setItem(\"users\",JSON.stringify(formData))\n    history.push(\"/weather-report\")\n  }\n\n\n  return(\n    <div className=\"wrapper\">\n      <header>\n       <img src={logo} alt=\"Logo\" className=\"logo\"/><span className=\"title\">Weather App</span>\n      </header>\n       \n      {submitting &&\n        <div>{formData}.</div>\n      }\n      <div><img src={people} alt=\"people\" className=\"people\"/></div>\n      <form onSubmit={handleSubmit} className='form-control'>\n        <input name=\"name\" onChange={handleChange} placeholder=\"Username\" className = \"input-fields\"/><br></br><br></br>\n        <input name=\"password\" onChange={handleChange} placeholder=\"Password\" className = \"input-fields\"/>\n        <br></br>\n        <button type=\"submit\" onClick = {submitHandler}>Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Login;","import { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport App from './App';\n\nfunction Home() {\n  return(\n    <Router basename={window.location.pathname || ''}>\n      <Switch>\n        <Route exact path=\"/\" component={Login}></Route>\n        <Route exact path=\"/weather-app/weather-report\" component={App}></Route>\n      </Switch>\n    </Router>\n  )\n}\nexport default Home;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Home';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}